<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Cecil&#x27;s Note - Kubernetes</title>
    <subtitle>Theory will only take you so far</subtitle>
    <link rel="self" type="application/atom+xml" href="https://g-song-i.github.io/categories/kubernetes/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://g-song-i.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-09-02T00:00:00+00:00</updated>
    <id>https://g-song-i.github.io/categories/kubernetes/atom.xml</id>
    <entry xml:lang="en">
        <title>Setting Up Kubernetes Cluster on AWS EC2 with Calico CNI</title>
        <published>2024-09-02T00:00:00+00:00</published>
        <updated>2024-09-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://g-song-i.github.io/posts/setting-up-kubernetes-cluster-on-aws-ec2-with-calico-cni/"/>
        <id>https://g-song-i.github.io/posts/setting-up-kubernetes-cluster-on-aws-ec2-with-calico-cni/</id>
        
        <content type="html" xml:base="https://g-song-i.github.io/posts/setting-up-kubernetes-cluster-on-aws-ec2-with-calico-cni/">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h1&gt;
&lt;p&gt;In this post, I am going to explain how to set up a Kubernetes cluster within the AWS infrastructure. Here, I set up a master node and two worker nodes using AWS EC2 instances. I refer to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mrmaheshrajput.medium.com&#x2F;deploy-kubernetes-cluster-on-aws-ec2-instances-f3eeca9e95f1&quot;&gt;this post&lt;&#x2F;a&gt; for this task, but I utilize Calico as the CNI plugin instead of WeaveNet, which was used in the post I mentioned. The choice of CNI plugin is up to you.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;infra-info&quot;&gt;Infra Info&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;09e38d81-057c-4516-8241-9883e9ac6d74&quot; alt=&quot;K8S_ARCH_AWS.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;create-vpc&quot;&gt;Create VPC&lt;&#x2F;h1&gt;
&lt;p&gt;First, I created a VPC for this task. To avoid using the same CIDR range as the Calico network, I chose the “172.16.0.0&#x2F;16” range. Since this cluster is not intended for active development or production, I opted to use just one availability zone and one subnet. You can add more if needed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;4fad8d5a-4c93-4f6b-940c-f20983eeaf44&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;create-sg&quot;&gt;Create SG&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;for-master&quot;&gt;For Master&lt;&#x2F;h2&gt;
&lt;p&gt;You now need to create security groups for the master and worker nodes, respectively. You can see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;networking&#x2F;ports-and-protocols&#x2F;&quot;&gt;the ports&lt;&#x2F;a&gt; that need to be opened.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;1fc46aad-ae7a-4eab-b1e2-b62e43ea9e30&quot; alt=&quot;Below&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The security group displayed below is the result of the initial configuration. Additional ports will need to be added later for the CNI plugin (Calico, in my case).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;e2bed3c3-28e3-4c79-bc63-7bbab501ff82&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;for-workers&quot;&gt;For Workers&lt;&#x2F;h2&gt;
&lt;p&gt;For the next step, create the worker node&#x27;s security group. This security group needs to include &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;networking&#x2F;ports-and-protocols&#x2F;&quot;&gt;ports&lt;&#x2F;a&gt; for the kubelet API, kube-proxy, and the port range for NodePort services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;92270fec-a749-4847-bf90-d87579301e7e&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;create-ec2&quot;&gt;Create EC2&lt;&#x2F;h1&gt;
&lt;p&gt;You will now create EC2 instances for the cluster. You are free to choose the configurations, but you should pay particular attention to the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;tools&#x2F;kubeadm&#x2F;install-kubeadm&#x2F;&quot;&gt;instance type&lt;&#x2F;a&gt; and networking settings. In my case, I selected a t2.xlarge instance for the master and t2.large instances for the workers. For network settings, choose a public subnet to enable SSH access to the instance, and apply the security group you previously configured.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;4c64596b-9b9d-43b8-b773-680dcb02e1e7&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;create-eip-elastic-ip&quot;&gt;Create EIP (Elastic IP)&lt;&#x2F;h1&gt;
&lt;p&gt;Since the instance does not have a public IP (though you can configure one using the auto-assign public IP function), you will need to associate an Elastic IP (EIP) with the instance. First, allocate 3 EIPs under EC2 &amp;gt; Network &amp;amp; Security &amp;gt; Elastic IPs. Once allocated, you can associate each EIP with an instance. Now, you will be able to connect to your EC2 instance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;allocate-eip&quot;&gt;Allocate EIP&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;36e0a293-e023-4f06-a38e-6eb17a460870&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;associate-eip&quot;&gt;Associate EIP&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;6d12366a-ffdd-4eab-9f75-bd8358673395&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;install-cri-kubeadm-kubelet-and-kubectl&quot;&gt;Install CRI, kubeadm, kubelet and kubectl&lt;&#x2F;h1&gt;
&lt;p&gt;Once connected to the instances, it is time to install the Container Runtime Interface (CRI) and some packages for Kubernetes installation. Before that, you need to turn off the swap. Swap space is an extension of physical RAM and helps maintain system stability and performance by providing virtual memory &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;phoenixnap.com&#x2F;kb&#x2F;swap-space&quot;&gt;[2]&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But why is turning off swap necessary?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The debates about this are extremely interesting. So, I am going to share them.&lt;&#x2F;li&gt;
&lt;li&gt;First, we essentially need to turn off swap to utilize all Kubernetes functionalities appropriately, according to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;issues&#x2F;53533&quot;&gt;this discussion&lt;&#x2F;a&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Support for swap is non-trivial. Guaranteed pods should never require swap. Burstable pods should have their requests met without requiring swap. BestEffort pods have no guarantee. The kubelet right now lacks the smarts to provide the right amount of predictable behavior here across pods.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;However, there is an interesting official post from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;blog&#x2F;2023&#x2F;08&#x2F;24&#x2F;swap-linux-beta&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;. You can now use the beta version of support for using swap on Linux! Quite interesting, right? You can read the articles I embedded:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This was due to the inherent difficulty in guaranteeing and accounting for pod memory utilization when swap memory was involved. As a result, swap support was deemed out of scope in the initial design of Kubernetes, and the default behavior of a kubelet was to fail to start if swap memory was detected on a node.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Swap in Kubernetes has numerous use cases for a wide range of users. As a result, the Node Special Interest Group within the Kubernetes project has invested significant effort into supporting swap on Linux nodes for beta. Compared to the alpha, the kubelet&#x27;s support for running with swap enabled is more stable and robust, more user-friendly, and addresses many known shortcomings. This graduation to beta represents a crucial step towards achieving the goal of fully supporting swap in Kubernetes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;swap-off-and-set-the-host-name-optional&quot;&gt;Swap off and Set the host name (optional)&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo swapoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo vim &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo hostnamectl set-hostname control-plane
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo hostnamectl set-hostname worker1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo hostnamectl set-hostname worker2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;update-etc-hosts-file&quot;&gt;Update &#x2F;etc&#x2F;hosts file&lt;&#x2F;h2&gt;
&lt;p&gt;After naming each host, update the &lt;code&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt; file on each node with their IP addresses and corresponding host names. This ensures that every host in the network can recognize each other by their new host names. You may also need to configure your VPC by enabling DNS hostnames.&lt;&#x2F;p&gt;
&lt;p&gt;Then, exit the terminal and reconnect to the instances to see that the host names have been changed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo vim &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;install-containerd&quot;&gt;Install containerd&lt;&#x2F;h2&gt;
&lt;p&gt;In this step, you will install containerd as the Container Runtime Interface (CRI). I used a script from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mrmaheshrajput.medium.com&#x2F;deploy-kubernetes-cluster-on-aws-ec2-instances-f3eeca9e95f1&quot;&gt;this post&lt;&#x2F;a&gt;, which you can also refer to. I uploaded the script to the instances and executed it; it worked for me. &lt;&#x2F;p&gt;
&lt;p&gt;The script performs several critical setup tasks: it loads necessary kernel modules, configures system settings for network traffic management, updates the package list, installs containerd, generates a default configuration for containerd, and restarts the service to apply all changes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# you can utilize the installation script here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; vim .&#x2F;containerd-install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; chmod u+x .&#x2F;containerd-install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&#x2F;containerd-install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; service containerd status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;installation-script&quot;&gt;Installation Script&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Make script executable using chmod u+x FILE_NAME.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Containerd installation script&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Instructions from https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;container-runtimes&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Creating containerd configuration file with list of necessary modules that need to be loaded with containerd&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tee &#x2F;etc&#x2F;modules-load.d&#x2F;k8s.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;overlay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;br_netfilter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Load containerd modules&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; modprobe overlay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; modprobe br_netfilter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Creates configuration file for kubernetes-cri file (changed to k8s.conf)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# sysctl params required by setup, params persist across reboots
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;net.bridge.bridge-nf-call-iptables  = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;net.ipv4.ip_forward                 = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Applying sysctl params&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sysctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Verify that the br_netfilter, overlay modules are loaded by running the following commands:&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lsmod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; br_netfilter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lsmod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; overlay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sysctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Update packages list&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Install containerd&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; install containerd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Create a default config file at default location&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;containerd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; containerd config default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tee &#x2F;etc&#x2F;containerd&#x2F;config.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Restarting containerd&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; systemctl restart containerd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should also modify containerd’s configuration file as shown below (then you should restart the service):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# change configiration file (&#x2F;etc&#x2F;containerd&#x2F;config.toml)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[plugins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;io.containerd.grpc.v1.cri&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;.containerd.runtimes.runc]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;…
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;[plugins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;io.containerd.grpc.v1.cri&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;.containerd.runtimes.runc.options]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SystemdCgroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; = true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;1f1647e2-bc81-481c-9836-34beb5217f3a&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install-kubeadm-kubelet-and-kubectl&quot;&gt;&lt;strong&gt;Install kubeadm, kubelet and kubectl&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now, install kubeadm, kubelet, and kubectl using the script from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mrmaheshrajput.medium.com&#x2F;deploy-kubernetes-cluster-on-aws-ec2-instances-f3eeca9e95f1&quot;&gt;this post&lt;&#x2F;a&gt;. The script updates the package list, establishes a new Kubernetes software repository, and installs the latest versions of kubeadm, kubelet, and kubectl. It also fixes these packages at their current versions to prevent automatic updates.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; vim .&#x2F;kube-install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; chmod u+x .&#x2F;kube-install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&#x2F;kube-install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; kubeadm version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; service kubelet status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;installation-script-1&quot;&gt;Installation Script&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Make script executable using chmod u+x FILE_NAME.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# apt-transport-https may be a dummy package; if so, you can skip that package
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-transport-https ca-certificates curl gpg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; https:&#x2F;&#x2F;pkgs.k8s.io&#x2F;core:&#x2F;stable:&#x2F;v1.29&#x2F;deb&#x2F;Release.key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --dearmor -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;kubernetes-apt-keyring.gpg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;deb [signed-by=&#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;kubernetes-apt-keyring.gpg] https:&#x2F;&#x2F;pkgs.k8s.io&#x2F;core:&#x2F;stable:&#x2F;v1.29&#x2F;deb&#x2F; &#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Installing latest versions&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; kubelet kubeadm kubectl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Fixate version to prevent upgrades&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt-mark hold kubelet kubeadm kubectl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;initialize-cluster&quot;&gt;Initialize Cluster&lt;&#x2F;h1&gt;
&lt;p&gt;Here, you will initialize the cluster using the kubeadm command. Before that, you need to set IPADDR, which is your current IP address, to be used as --apiserver-advertise-address, and also set POD_CIDR. Since these two are on the same network level, their subnets should not overlap. In the case of Calico, the default CIDR is 192.168.0.0&#x2F;16; that’s why I chose this range for POD_CIDR and another range for the VPC.&lt;&#x2F;p&gt;
&lt;p&gt;After initialization, you should copy your kubeconfig and set the privileges appropriately using the commands below. Alternatively, you can use the commands with sudo. Be sure to retain the join command, which allows worker nodes to join your cluster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;init-kubeadm&quot;&gt;Init Kubeadm&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; IPADDR=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;172.16.2.84&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; POD_CIDR=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;192.168.0.0&#x2F;16&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo kubeadm init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --apiserver-advertise-address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;IPADDR --pod-network-cidr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;POD_CIDR
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# you can use it when join worker nodes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; kubeadm join 172.16.2.84:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;	--discovery-token-ca-cert-hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cert-hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;install-calico-as-cni-plugin&quot;&gt;Install Calico as CNI plugin&lt;&#x2F;h1&gt;
&lt;p&gt;Now it is time to install a CNI (Container Network Interface) plugin. So far, you might find that the master node is in a &#x27;not ready&#x27; status, and some pods, like core-dns, are not operational. This is because, without a network interface provided by a CNI, the pods cannot establish network connections necessary for their operations. A CNI plugin is essential for facilitating communication between pods across the cluster. It configures the network layer by assigning IP addresses to pods and managing the network routes so that pods can communicate with each other and with the external network.&lt;&#x2F;p&gt;
&lt;p&gt;You can download the calico.yaml file and apply it! However, make sure to remove the &#x27;NoSchedule&#x27; taint from the master’s configuration, so that Calico pods can be scheduled on the master node.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; wget https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;manifests&#x2F;calico.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; calico.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# find taint configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; kubectl get nodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;jsonpath=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;{range .items[*]}{.metadata.name}{&amp;quot;\t&amp;quot;}{.spec.taints}{&amp;quot;\n&amp;quot;}{end}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;result:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; control-plane	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;effect&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;NoSchedule&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;node-role.kubernetes.io&#x2F;control-plane&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# untaint so that calico pods can be scheduled on the master node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; kubectl taint nodes control-plane node-role.kubernetes.io&#x2F;control-plane-
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;open-ports-in-sg-for-calico&quot;&gt;Open ports in SG for Calico&lt;&#x2F;h2&gt;
&lt;p&gt;Additionally, you must include a security group rule for the Calico port, which is TCP 179, for both master and worker nodes&lt;&#x2F;p&gt;
&lt;h1 id=&quot;joind-worker-nodes&quot;&gt;Joind Worker Nodes&lt;&#x2F;h1&gt;
&lt;p&gt;Now, all you need to do for the worker nodes is to execute the command &lt;code&gt;sudo kubeadm join&lt;&#x2F;code&gt; so that they can be recognized and utilized by the master node. After joining you can check their status with &lt;code&gt;kubectl&lt;&#x2F;code&gt; command in the master node.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; sudo kubeadm join 172.16.2.84:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;	--discovery-token-ca-cert-hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cert-hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;d89c45be-4b2b-439e-84bb-a27333e57d94&quot; alt=&quot;image.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;In this post, we walked through the detailed steps of setting up a Kubernetes cluster on AWS with EC2 instances for the master and worker nodes, utilizing Calico as the CNI plugin. I hope this post helps you understand the process and the importance of each step. If you have any questions or feedback, please feel free to reach out to me. Thank you for reading! 🚀&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to manage your kubernetes cluster 01: Rancher</title>
        <published>2024-07-04T00:00:00+00:00</published>
        <updated>2024-07-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://g-song-i.github.io/posts/how-to-manage-your-kubernetes-01-rancher/"/>
        <id>https://g-song-i.github.io/posts/how-to-manage-your-kubernetes-01-rancher/</id>
        
        <content type="html" xml:base="https://g-song-i.github.io/posts/how-to-manage-your-kubernetes-01-rancher/">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#overview&quot;&gt;Overview&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#install-rancher-with-docker&quot;&gt;Install Rancher with Docker&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#dive-into-rancher&quot;&gt;Dive into Rancher&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
            &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#login&quot;&gt;Login&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
            &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#importing-your-existing-cluster&quot;&gt;Importing your existing cluster&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
            &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#explore-dashboard&quot;&gt;Explore Dashboard&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#more&quot;&gt;More...&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#logging-in-rancher&quot;&gt;Logging in Rancher&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#setting-up-alerts&quot;&gt;Setting Up Alerts&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#when-is-using-rancher-a-good-choice&quot;&gt;When Is Using Rancher a Good Choice?&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#user-friendliness-for-non-terminal-users&quot;&gt;User-Friendliness for Non-Terminal Users&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#comprehensive-management-from-a-single-pane&quot;&gt;Comprehensive Management from a Single Pane&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;g-song-i.github.io&#x2F;posts&#x2F;how-to-manage-your-kubernetes-01-rancher&#x2F;#extensive-catalog-of-applications&quot;&gt;Extensive Catalog of Applications&lt;&#x2F;a&gt; &lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h1&gt;
&lt;p&gt;Do you want to manage your Kubernetes cluster? There are several ways to manage it such as using the kubectl CLI if you are familiar with the terminal interface, Rancher from SUSE if you prefer managing through a console, and k9s if you want a more stylish approach!&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I will explain how to install Rancher for managing Kubernetes and discuss when it is a good choice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install-rancher-with-docker&quot;&gt;Install Rancher with Docker&lt;&#x2F;h2&gt;
&lt;p&gt;Note that this method of installation is just for testing and demonstration purposes as described at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ranchermanager.docs.rancher.com&#x2F;getting-started&#x2F;installation-and-upgrade#docker-install&quot;&gt;Rancher documentation&lt;&#x2F;a&gt;. You should choose another method if it is for production use.&lt;&#x2F;p&gt;
&lt;p&gt;Here I have a single docker-compose file to set up and tear down the Rancher container:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;version: &amp;#39;3&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;services:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  rancher:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    image: rancher&#x2F;rancher:v2.8-head
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    container_name: rancher_test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    restart: always
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ports:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    - &amp;quot;80:80&#x2F;tcp&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    - &amp;quot;443:443&#x2F;tcp&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    volumes:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    - &amp;quot;.&#x2F;rancher-data:&#x2F;var&#x2F;lib&#x2F;rancher&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    environment:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    - CATTLE_BOOTSTRAP_PASSWORD=1234
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    privileged: true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you just need to run the command (you might need &amp;quot;sudo&amp;quot; privileges):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; docker-compose up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; network &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;rancher_default&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; with the default driver
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Pulling&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rancher (rancher&#x2F;rancher:v2.8-head)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;v2.8-head:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; Pulling from rancher&#x2F;rancher
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;088fce18aff4:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; Pull complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;8c6a13d6a83e:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; Pull complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;378e6ec2cbbc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; Pull complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dive-into-rancher&quot;&gt;Dive into Rancher&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;login&quot;&gt;Login&lt;&#x2F;h3&gt;
&lt;p&gt;Now you can access the website via &amp;quot;http&amp;quot;. Then you might see the login screen. Since we already defined the bootstrap password (CATTLE_BOOTSTRAP_PASSWORD) in the docker-compose file, enter &amp;quot;1234&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;g-song-i&#x2F;g-song-i.github.io&#x2F;assets&#x2F;57793091&#x2F;7dd8709b-29d3-42a1-9185-a923d0cb5a37&quot; alt=&quot;RancherBootstrapLogin&quot; &#x2F;&gt; &lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;importing-your-existing-cluster&quot;&gt;Importing your existing cluster&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s import your existing cluster. To import the cluster into Rancher, you must have &amp;quot;cluster-admin&amp;quot; privileges. You can apply a clusterrolebinding as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;kubectl create clusterrolebinding cluster-admin-binding \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  --clusterrole cluster-admin \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  --user [USER_ACCOUNT]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can check which account you are using with the command (user in context):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;kubectl config view --minify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(or) kubectl config current-context
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now click &amp;quot;Import Existing&amp;quot;, 
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;g-song-i&#x2F;g-song-i.github.io&#x2F;assets&#x2F;57793091&#x2F;1f96795c-4e36-46ea-8f4c-2657949ddd59&quot; alt=&quot;ImportingClusterButton&quot; &#x2F;&gt; &lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Write the cluster&#x27;s name, and press the create button. 
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;g-song-i&#x2F;g-song-i.github.io&#x2F;assets&#x2F;57793091&#x2F;14c6563b-29d4-4786-9649-3547f586adc1&quot; alt=&quot;CreateCluster&quot; &#x2F;&gt; &lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then you might see some command lines to apply Rancher&#x27;s YAML to create some pods for importing. I tried the first one &lt;code&gt;kubectl apply -f https:&#x2F;&#x2F;~.yaml&lt;&#x2F;code&gt;, but I encountered the message &lt;code&gt;Unable to connect to the server: tls: failed to verify certificate: x509: certificate signed by unknown authority&lt;&#x2F;code&gt;, I tried the second line &lt;code&gt;curl --insecure --sfL ... | kubectl apply -f -&lt;&#x2F;code&gt;, and it worked for me.&lt;&#x2F;p&gt;
&lt;p&gt;You can enter the command &lt;code&gt;kubectl get pods -A&lt;&#x2F;code&gt; just to see what pods are created for this work. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$ kubectl get pods -A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;NAMESPACE       NAME                                       READY   STATUS              RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;cattle-system   cattle-cluster-agent-845554d4f8-qnksl      0&#x2F;1     ContainerCreating   0          12s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now you can explore your cluster and their resources on the Rancher dashboard!
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;g-song-i&#x2F;g-song-i.github.io&#x2F;assets&#x2F;57793091&#x2F;6dc20e0f-03f3-4b68-8760-505c1957fbfe&quot; alt=&quot;dashborad&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;explore-dashboard&quot;&gt;Explore Dashboard&lt;&#x2F;h3&gt;
&lt;p&gt;From here, you can see useful cluster information to inspect and debug your cluster. Rancher&#x27;s dashboard offers a comprehensive overview of your cluster&#x27;s health, resource usage, and more. You can utilize the dashboard to manage workloads, configure network policies, and set up service discovery.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more&quot;&gt;More...&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;logging-in-rancher&quot;&gt;Logging in Rancher&lt;&#x2F;h3&gt;
&lt;p&gt;Rancher enhances the management of Kubernetes clusters by providing comprehensive logging capabilities that are crucial for monitoring the health and activities within your cluster. Here’s a brief overview of the logging features in Rancher:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Centralized Logging&lt;&#x2F;li&gt;
&lt;li&gt;Integration with Multiple Logging Backends&lt;&#x2F;li&gt;
&lt;li&gt;Log Analysis and Troubleshooting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setting-up-alerts&quot;&gt;Setting Up Alerts&lt;&#x2F;h3&gt;
&lt;p&gt;Rancher allows you to set up &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ranchermanager.docs.rancher.com&#x2F;v2.0-v2.4&#x2F;reference-guides&#x2F;rancher-project-tools&#x2F;project-alerts&quot;&gt;alerts&lt;&#x2F;a&gt; for various events within your cluster. This feature helps in proactive monitoring and can alert administrators about critical issues before they impact your operations. Setting up alerts involves specifying the conditions and thresholds that trigger notifications.&lt;&#x2F;p&gt;
&lt;p&gt;By integrating these features into your daily operations, you can maintain a robust, efficient, and secure Kubernetes environment, ensuring your applications run smoothly and reliably.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;when-is-using-rancher-a-good-choice&quot;&gt;When Is Using Rancher a Good Choice?&lt;&#x2F;h1&gt;
&lt;p&gt;While tools like kubectl and k9s offer powerful ways to interact with Kubernetes, each has its context where it excels. Rancher, in particular, stands out in several scenarios:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;user-friendliness-for-non-terminal-users&quot;&gt;User-Friendliness for Non-Terminal Users&lt;&#x2F;h2&gt;
&lt;p&gt;One of the primary advantages of using Rancher is its user-friendly graphical interface. If you or your team are not familiar or comfortable with command-line interfaces, Rancher provides a more accessible entry point into managing Kubernetes. Its dashboard presents complex cluster information and operations in a visual format, making it easier to understand and manage without deep command-line expertise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comprehensive-management-from-a-single-pane&quot;&gt;Comprehensive Management from a Single Pane&lt;&#x2F;h2&gt;
&lt;p&gt;Rancher offers a centralized management pane for all Kubernetes clusters. This is particularly useful for organizations managing multiple clusters, possibly across different environments (cloud and on-prem). Instead of switching between different terminal windows or scripts, Rancher gives you a unified overview and control point for deploying, managing, and scaling applications across all your clusters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extensive-catalog-of-applications&quot;&gt;Extensive Catalog of Applications&lt;&#x2F;h2&gt;
&lt;p&gt;Rancher comes with a built-in catalog of Helm charts and other applications, which can be deployed with just a few clicks. This is particularly advantageous for teams looking to rapidly deploy and test new applications without going through the CLI-based setup of Helm or other package managers.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
